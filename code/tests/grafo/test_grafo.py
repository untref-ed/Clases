from unittest import TestCase

from edd.grafo import DiGrafo, Grafo


class TestGrafo(TestCase):
    def test_grado_no_dirigido_no_ponderado(self):
        g = Grafo()
        g.agregar_arista("A", "B")
        g.agregar_arista("A", "C")
        g.agregar_arista("B", "C")
        g.agregar_arista("C", "D")
        self.assertFalse(g.dirigido)
        self.assertFalse(g.ponderado)
        self.assertEqual(len(g.vertices), 4)
        self.assertEqual(g["A"].grado_entrada, 2)
        self.assertEqual(len(g["A"].adyacentes), 2)
        self.assertEqual(g["B"].grado_entrada, 2)
        self.assertEqual(len(g["B"].adyacentes), 2)
        self.assertEqual(g["C"].grado_entrada, 3)
        self.assertEqual(len(g["C"].adyacentes), 3)
        self.assertEqual(g["D"].grado_entrada, 1)
        self.assertEqual(len(g["D"].adyacentes), 1)

    def test_grado_no_dirigido_ponderado(self):
        g = Grafo()
        g.agregar_arista("A", "B")
        g.agregar_arista("A", "C", 3)
        g.agregar_arista("B", "C", 2)
        g.agregar_arista("C", "D")
        self.assertFalse(g.dirigido)
        self.assertTrue(g.ponderado)
        self.assertEqual(len(g.vertices), 4)
        self.assertEqual(g["A"].grado_entrada, 2)
        self.assertEqual(len(g["A"].adyacentes), 2)
        self.assertEqual(g["B"].grado_entrada, 2)
        self.assertEqual(len(g["B"].adyacentes), 2)
        self.assertEqual(g["C"].grado_entrada, 3)
        self.assertEqual(len(g["C"].adyacentes), 3)
        self.assertEqual(g["D"].grado_entrada, 1)
        self.assertEqual(len(g["D"].adyacentes), 1)

    def test_grado_dirigido_no_ponderado(self):
        g = DiGrafo()
        g.agregar_arista("A", "B")
        g.agregar_arista("A", "C")
        g.agregar_arista("B", "C")
        g.agregar_arista("C", "D")
        self.assertTrue(g.dirigido)
        self.assertFalse(g.ponderado)
        self.assertEqual(len(g.vertices), 4)
        self.assertEqual(g["A"].grado_entrada, 0)
        self.assertEqual(len(g["A"].adyacentes), 2)
        self.assertEqual(g["B"].grado_entrada, 1)
        self.assertEqual(len(g["B"].adyacentes), 1)
        self.assertEqual(g["C"].grado_entrada, 2)
        self.assertEqual(len(g["C"].adyacentes), 1)
        self.assertEqual(g["D"].grado_entrada, 1)
        self.assertEqual(len(g["D"].adyacentes), 0)

    def test_grado_dirigido_ponderado(self):
        g = DiGrafo()
        g.agregar_arista("A", "B")
        g.agregar_arista("A", "C", 3)
        g.agregar_arista("B", "C", 2)
        g.agregar_arista("C", "D")
        self.assertTrue(g.dirigido)
        self.assertTrue(g.ponderado)
        self.assertEqual(len(g.vertices), 4)
        self.assertEqual(g["A"].grado_entrada, 0)
        self.assertEqual(len(g["A"].adyacentes), 2)
        self.assertEqual(g["B"].grado_entrada, 1)
        self.assertEqual(len(g["B"].adyacentes), 1)
        self.assertEqual(g["C"].grado_entrada, 2)
        self.assertEqual(len(g["C"].adyacentes), 1)
        self.assertEqual(g["D"].grado_entrada, 1)
        self.assertEqual(len(g["D"].adyacentes), 0)
